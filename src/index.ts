import { Hono } from "hono";
import { PrismaClient } from "@prisma/client";
import { serve } from "@hono/node-server";


const app = new Hono();
const prisma = new PrismaClient();





// ---------------------- Customers ----------------------

// Register a new customer
app.post("/customers", async (c) => {
  const { id, name, email, phoneNumber, address } = await c.req.json(); // Expect `id` in request
  const customer = await prisma.customer.create({
    data: { id, name, email, phoaddressneNumber,  },
  });
  return c.json(customer);
});


// Retrieve details of a customer
app.get("/customers/:id", async (c) => {
  const id = c.req.param("id");
  const customer = await prisma.customer.findUnique({ where: { id } });
  return customer ? c.json(customer) : c.notFound();
});

// Retrieve all orders placed by a customer
app.get("/customers/:id/orders", async (c) => {
  const id = c.req.param("id");
  const orders = await prisma.order.findMany({
    where: { customerId: id },
    include: { orderItems: { include: { menuItem: true } } },
  });
  return c.json(orders);
});

// ---------------------- Restaurants ----------------------

// Register a new restaurant
app.post("/restaurants", async (c) => {
  const {id, name, location } = await c.req.json();
  const restaurant = await prisma.restaurant.create({
    data: {id, name, location },
  });
  return c.json(restaurant);
});

// Get all available menu items from a restaurant
app.get("/restaurants/:id/menu", async (c) => {
  const id = c.req.param("id");
  const menuItems = await prisma.menuItem.findMany({
    where: { restaurantId: id, isAvailable: true },
  });
  return c.json(menuItems);
});

// ---------------------- Menu Items ----------------------

// Add a menu item to a restaurant
app.post("/restaurants/:id/menu", async (c) => {
  const restaurantId = c.req.param("id");
  const { id, name, price, isAvailable } = await c.req.json();
  const menuItem = await prisma.menuItem.create({
    data: { id, restaurantId, name, price, isAvailable },
  });
  return c.json(menuItem);
});

// Update availability or price of a menu item
app.patch("/menu/:id", async (c) => {
  const id = c.req.param("id");
  const { price, isAvailable } = await c.req.json();
  const menuItem = await prisma.menuItem.update({
    where: { id },
    data: { price, isAvailable },
  });
  return c.json(menuItem);
});

// ---------------------- Orders ----------------------

// Place an order (includes items and quantities)
app.post("/orders", async (c) => {
  const {id, customerId, restaurantId, items } = await c.req.json();

  const totalPrice = await items.reduce(async (sumPromise: any, item: any) => {
    const sum = await sumPromise;
    const menuItem = await prisma.menuItem.findUnique({ where: { id: item.menuItemId } });
    return sum + (menuItem ? menuItem.price.toNumber() * item.quantity : 0);
  }, Promise.resolve(0));

  const order = await prisma.order.create({
    data: {
      id,
      customerId,
      restaurantId,
      totalPrice,
      orderItems: { create: items.map((item: any) => ({ menuItemId: item.menuItemId, quantity: item.quantity })) },
    },
    include: { orderItems: true },
  });

  return c.json(order);
});

// Retrieve details of a specific order
app.get("/orders/:id", async (c) => {
  const id = c.req.param("id");
  const order = await prisma.order.findUnique({
    where: { id },
    include: { orderItems: { include: { menuItem: true } } },
  });
  return order ? c.json(order) : c.notFound();
});

// Update the status of an order
app.patch("/orders/:id/status", async (c) => {
  const id = c.req.param("id");
  const { status } = await c.req.json();
  const order = await prisma.order.update({
    where: { id },
    data: { status },
  });
  return c.json(order);
});

// ---------------------- Reports & Insights ----------------------

// Get total revenue generated by a restaurant
app.get("/restaurants/:id/revenue", async (c) => {
  const id = c.req.param("id");
  const revenue = await prisma.order.aggregate({
    where: { restaurantId: id },
    _sum: { totalPrice: true },
  });
  return c.json({ revenue: revenue._sum.totalPrice || 0 });
});

// Retrieve the most ordered menu item across all restaurants
app.get("/menu/top-items", async (c) => {
  const topItems = await prisma.orderItem.groupBy({
    by: ["menuItemId"],
    _sum: { quantity: true },
    orderBy: { _sum: { quantity: "desc" } },
    take: 1,
  });

  if (topItems.length === 0) return c.json({ message: "No orders found" });

  const menuItem = await prisma.menuItem.findUnique({ where: { id: topItems[0].menuItemId } });
  return c.json({ menuItem, totalOrders: topItems[0]._sum.quantity });
});

// Get the top 5 customers based on the number of orders placed
app.get("/customers/top", async (c) => {
  const topCustomers = await prisma.customer.findMany({
    take: 5,
    orderBy: { orders: { _count: "desc" } },
    include: { orders: true },
  });
  return c.json(topCustomers);
});

// ---------------------- Server Setup ----------------------

serve({ fetch: app.fetch, port: 3000 })
console.log('Server is running on http://localhost:3000')